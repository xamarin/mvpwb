---
uti: com.xamarin.workbook
platforms:
- MacNet45
- WPF
---

```csharp
#load "Geometry.csx"
#load "Image.csx"
#load "Model.csx"
#load "ImageResultHandler.csx"
```

# **Lesson 1: Bresenham’s Line Drawing Algorithm**

# First attempt

The goal of the first lesson is to render the wire mesh. To do this, we should learn how to draw line segments. We can simply read what Bresenham’s line algorithm is, but let’s write code ourselves. How does the simplest code that draws a line segment between `(x0, y0)` and `(x1, y1)` points look like? Apparently, something like this:

```csharp
Image Line (Image image, int x0, int y0, int x1, int y1, Color color)
{
    for (double t = 0; t < 1; t += 0.01) {
        int x = (int) (x0 * (1-t) + x1 * t);
        int y = (int) (y0 * (1-t) + y1 * t); 
        image [x, y] = color; 
    } 
    return image;
}

Line (new Image (100, 100, Format.BGR), x0: 13, y0: 20, x1: 80, y1: 40, color: Color.White);
```

# Second attempt

The problem with this code (in addition to efficiency) is the choice of the constant, which I took equal to .01. If we take it equal to .1, our line segment will look like this:

```csharp
Image Line (Image image, int x0, int y0, int x1, int y1, Color color)
{
    for (int x = x0; x <= x1; x++) {
        double t = (x-x0)/(double)(x1-x0);
        int y = (int)(y0*(1-t) + y1*t);
         
        image [x, y] = color; 
    } 
    return image;
}

Line (new Image (100, 100, Format.BGR), x0: 13, y0: 20, x1: 80, y1: 40, color: Color.White);
```

Caution! The first source of errors in such code of my students is the integer division, like: `(x-x0)/(x1-x0)`. Then, if we try to draw the following lines with this code:

```csharp
var image = new Image (100, 100, Format.BGR);
Line(image, x0: 13, y0: 20, x1: 80, y1: 40, color: Color.White);
Line(image, x0: 20, y0: 13, x1: 40, y1: 80, color: Color.Red);
Line(image, x0: 80, y0: 40, x1: 13, y1: 20, color: Color.Red);
```

It turns out that one line is good, the second one is with holes, and there’s no third line at all. Note that the first and the third lines (in the code) draw the same line in different colors, and in different directions (with the source and target points flipped). We have already seen the white one, it is drawn well. I was hoping to change the color of the white line to red, but could not do it. It’s a test for symmetry: the result of drawing a line segment should not depend on the order of points: the `(a,b)` line segment should be exactly the same as the `(b,a)` line segment.

# Third attempt

We fix the missing red line by swapping the points so `x0` is always lower than `x1`.

There are holes in one of the line segments due to the fact that its height is greater than the width. My students often suggest the following fix:

`if (dx > dy) { for (int x) } else { for (int y) }`

Holy cow!

```csharp
static void Swap<T>(ref T x, ref T y)
{
     T t = y;
     y = x;
     x = t;
}

static void Swap<T>(T[] arr, int x, int y)
{
     T t = arr[y];
     arr[y] = arr[x];
     arr[x] = t;
}

Image Line (Image image, int x0, int y0, int x1, int y1, Color color)
{
    bool steep = false;
    // if the line is steep, we transpose the image
    if (Math.Abs (x0-x1) < Math.Abs (y0-y1)) {
        Swap (ref x0, ref y0);
        Swap (ref x1, ref y1);
        steep = true;
    }
    if (x0 > x1) { // make it left to right
        Swap (ref x0, ref x1);
        Swap (ref y0, ref y1);
    }
    // (x0, y0) == (x1, y1)
    if(x0 == x1) {
        image [x0, y0] = color;
    } else {
        for (int x = x0; x <= x1; x++) {
            double t = (x-x0) / (double)(x1-x0);
            int y = (int)Math.Round(y0*(1-t) + y1*t);
            if (steep)
                image [y, x] = color;
            else
                image [x, y] = color; 
        }
    }
    return image;
}

Line(image, x0: 13, y0: 20, x1: 80, y1: 40, color: Color.White);
Line(image, x0: 20, y0: 13, x1: 40, y1: 80, color: Color.Red);
Line(image, x0: 80, y0: 40, x1: 13, y1: 20, color: Color.Red);
```

# Wireframe rendering

So now we are ready to create a wire render. You can find the snapshot of the code and the test model here. I used the [wavefront obj](http://en.wikipedia.org/wiki/Wavefront_.obj_file) format of the file to store model. All we need for the render is read from the file the array of vertices of the following type:

`v 0.608654 -0.568839 -0.416318`

are `x,y,z` coordinates, one vertex per file line and faces

`f 1193/1240/1193 1180/1227/1180 1179/1226/1179`

```csharp
int width = 800, height = 800;
var headModel = Model.FromFile ("obj/african_head.obj");

var image = new Image(width, height, Format.BGR);
foreach(var face in headModel.Faces) {
    for(int j=0; j<3; j++) {
        var v0 = headModel.Vertices[face.Vertices [j]];
        var v1 = headModel.Vertices[face.Vertices [(j+1) % 3]];
        // scale x from [-1..1] to [0..w] 
        // scale y from [-1..1] to [0..h]
        int x0 = (int)((v0.x + 1) * width / 2); 
        int y0 = (int)((v0.y + 1) * height / 2); 
        int x1 = (int)((v1.x + 1) * width / 2); 
        int y1 = (int)((v1.y + 1) * height / 2);
        Line(image, x0, y0, x1, y1, Color.White);
    }
}

image.VerticalFlip ();
image
```

